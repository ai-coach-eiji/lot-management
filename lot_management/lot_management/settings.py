"""
Django settings for lot_management project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path

import environ
env = environ.Env()
env.read_env('.env')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
print("モード: ", DEBUG) # DEBUG用
if DEBUG:
    SECURE_SSL_REDIRECT = False
else:
    SECURE_SSL_REDIRECT = True

#ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')

# Application definition
# 上から順に優先されるため、デフォルトを上書きする必要がなければ順に追加していく
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'lot', 
    'accounts', 
    'django.contrib.sites', 
    'allauth', 
    'allauth.account', 
    'allauth.socialaccount', 
    'allauth.socialaccount.providers.google', # googleアカウントと連携
]

#################
# Authentication
#################

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', # デフォルト（管理サイトの認証に必要）
    'allauth.account.auth_backends.AuthenticationBackend',
]
ACCOUNT_AUTHENTICATION_METHOD = 'email' # 認証をメールアドレスとパスワードに設定
ACCOUNT_USERNAME_REQUIRED = False # ユーザー名を使用しない
#ACCOUNT_USER_MODEL_USERNAME_FIELD = None # username field が username以外の場合に必要
ACCOUNT_EMAIL_VERIFICATION = 'mandatory' # メールで本登録
ACCOUNT_EMAIL_REQUIRED = True # メールアドレスを必須項目に設定
ACCOUNT_LOGOUT_ON_GET = True # 確認なし（ワンクリック）のログアウト

SITE_ID = 1

SOCIALACCOUNT_LOGIN_ON_GET=True # Googleアカウントでログインする際に確認ページを挟まない

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

LOGIN_REDIRECT_URL = 'lot:mypage'
ACCOUNT_LOGOUT_REDIRECT_URL = 'account_login'

AUTH_USER_MODEL = 'accounts.CustomUser' # CustomUserを使用（名前空間名で指定）

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware', # セキュリティ強化
    'django.contrib.sessions.middleware.SessionMiddleware', # セッション有効化
    'django.middleware.common.CommonMiddleware', # 便利機能（アクセス制限、URL設定）
    'django.middleware.csrf.CsrfViewMiddleware', # csrf検証
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Userオブジェクトの割り当て（遅延評価）
    'django.contrib.messages.middleware.MessageMiddleware', # フラッシュメッセージ有効化
    'django.middleware.clickjacking.XFrameOptionsMiddleware', # クリックジャッキング対策
]

ROOT_URLCONF = 'lot_management.urls' # リクエスト時の参照先

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates', # DTLを利用
        'DIRS': [], # どのディレクトリを優先して見にいくか
        'APP_DIRS': True, # 各アプリ直下のtemplatesを含める
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', # `allauth` needs this from django
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lot_management.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        #'ATOMIC_REQUESTS': True, # ビュー内でロールバックを実施（同時アクセスが少ない場合に使おう）
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR,'static') # リバースプロキシ配信元のディレクトリ

#STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static/'), )

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL') # メール送信元アドレス
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = env('EMAIL_HOST_USER') # メールアドレス
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD') # アプリパスワード
EMAIL_USE_TLS = True


